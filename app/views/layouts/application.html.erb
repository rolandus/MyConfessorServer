<!DOCTYPE html>
<html>
<head>
	<title>My Confessor</title>
	<!-- Latest compiled and minified CSS
	<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.min.css">
	<!-- Optional theme>
	<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap-theme.min.css"> -->
	<%= stylesheet_link_tag    "application", media: "all", "data-turbolinks-track" => true %>
	<%= javascript_include_tag "application", "data-turbolinks-track" => true %>
  	<%= csrf_meta_tags %>
  	<!-- %= javascript_include_tag "jquery.js?body=1" % -->
    <!-- script src="http://underscorejs.org/underscore.js"></script>
    <script src="http://backbonejs.org/backbone.js"></script>
    <script src="assets/handlebars.js"></script -->
	<body>
		<!-- Latest compiled and minified JavaScript -->
		<!-- script src="//netdna.bootstrapcdn.com/bootstrap/3.0.3/js/bootstrap.min.js"></script></head -->
		<!-- script src="//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.5.2/underscore-min.js"></script></head -->
		<!-- script src="//cdnjs.cloudflare.com/ajax/libs/backbone.js/1.1.0/backbone-min.js"></script></head -->
		<% if user_account_signed_in? %>
		  Logged in as <strong><%= current_user_account.email %></strong>.
		  <%#= link_to 'Edit profile', edit_user_account_registration_path, :class => 'navbar-link' %> <!-- | -->
		  <%= link_to "Logout", destroy_user_account_session_path, method: :delete, :class => 'navbar-link'  %>
		<% else %>
		  <%#= link_to "Request Account", user_account_registration_path, :class => 'navbar-link'  %> <!-- | -->
		  <%= link_to "Login", new_user_account_session_path, :class => 'navbar-link'  %>
		<% end %>

		<% if alert %>
			<p class="alert alert-error"><%= alert %></p>
		<% end %>
	
		<%= yield %>
		
		<br />
		<a href="/test">Test Directory</a>
	</div>
<!--
		</div>
		<div id="footer">
			<a href="/confessor_requests/new" class="icon_container" data-page="new_confessor_request">
				<%= image_tag "icon_chat.png", {class: "icon"} %>
				<span class="icon_label">Request an Account</span>
			</a>
			<a href="/confessor_requests" class="icon_container" data-page="confessor_requests">
				<%= image_tag "icon_chat.png", {class: "icon"} %>
				<span class="icon_label">Pending Requests</span>
			</a>
			<a href="/user_accounts" class="icon_container" data-page="user_accounts">
				<%= image_tag "icon_people.png", {class: "icon"} %>
				<span class="icon_label">Manage Accounts</span>
			</a>
			<a href="/user_accounts/sign_in" class="icon_container" data-page="sign_in">
				<%= image_tag "icon_lock.png", {class: "icon"} %>
				<span class="icon_label">Log In</span>
			</a>
			<a href="/user_accounts/sign_out" class="icon_container">
				<%= image_tag "icon_unlock.png", {class: "icon"} %>
				<span class="icon_label">Log Out</span>
			</a>
		</div>
		
<script id="confessor_requests-template" type="text/x-handlebars-template">
<h2>Account Requests</h2>
<ul>
	{{#each items}}
    <li>
    	<h3>{{first_name}} {{last_name}} - {{deref diocese_id "dioceses" "name"}}, {{deref state_id "states" "abbreviation"}}</h3>
    	<p>{{email}}</p>
    	<form></form>
    		<p><input id="verified_checkbox" type="checkbox"><label for="verified_checkbox">I have verified that this is really a priest, and that he requested this account.</label></p>
    		<input type="button" value="Approve">
    		<input type="button" value="Deny">
    		<input type="button" value="Google Him">
    	
    </li>
    {{/each}}
</ul>
</script>

<script type="text/javascript">

(function() { //By surrounding with an anonymous function, we avoid polluting the global scope with anything.

var $MC = {}; //Var one local variable, and then attach everything to that one variable for cleanliness.

/**
 * App-level settings live here.
 */
$MC.settings = {
	server_url: "http://localhost:3000",
	are_templates_precompiled: false
};

/**
 * URLs used throughout the app
 */
$MC.Url = function(name) {
	this.root = $MC.settings.server_url + "/";
	this.url = this.root + name + ".json";
};
$MC.urls = {
	states: new $MC.Url("states").url,
	dioceses: new $MC.Url("dioceses").url,
	confessor_requests: new $MC.Url("confessor_requests").url
};

/**
 * Names of pages"Pages" used throughout the app
 */
$MC.Page = function(name) {
	this.selector = "#" + name + "-page";
}
$MC.pages = {
	sign_in: new $MC.Page("sign_in"),
	confessor_requests: new $MC.Page("confessor_requests"),
	new_confessor_request: new $MC.Page("new_confessor_request"),
	user_accounts: new $MC.Page("user_accounts"),
	new_user_account: new $MC.Page("new_user_account"),
	edit_user_account: new $MC.Page("edit_user_account"),
}

/**
 * Handlebars helper used to convert a record ID into something useful (like a name or abbreviation)
 * 
 * Parameters
 *  id         - The id of the record to dereferenced
 *  collection - The collection to select the record from
 *  property   - The property whose value will be returned
 */
Handlebars.registerHelper("deref", function(id, collection, property) {
	return $MC[collection].get(id).attributes[property];
});

/**
 * Template helper - abstracts the fact that the templates may
 * or may not be precompiled. If the scripts are not precompiled,
 * it assumes that each template lives in its own script tag
 * with an ID of the format "<template name>-template".
 * 
 * Parameters
 *  name - The name of the template. Convention is for the name to NOT end with "-template"
 */
$MC.Template = function(name, collection) {
	this.name = name;
	this.collection = collection;
	if ($MC.settings.are_templates_precompiled) {
		this.template = Handlebars.templates[name];
	} else {
		this.template = Handlebars.compile($("#" + this.name + "-template").html())
	}
};
$MC.Template.prototype = {
	getHtml: function() {
		var 
			json = this.collection.toJSON(),
			context = { items: json }
		;
		return this.template(context);
	},
	
	getHtmlFor: function(context) {
		return this.template(context);
	}
};

/**
 * Generic Model to serialize and submit a form as JSON.
 */
$MC.Form = Backbone.Model.extend();
$MC.Form.prototype.serialize = function($form) {
	this.$form = $form;
	this.urlRoot = $form.attr("action");
	this.set($form.serializeToJSON());
};

/**
 * Collection of States
 *
$MC.StateCollection = Backbone.Collection.extend({
    url: $MC.urls.states,
    is_ready: false
});
$MC.states = new $MC.StateCollection;

/**
 * Collection of Dioceses
 *
$MC.DioceseCollection = Backbone.Collection.extend({
    url: $MC.urls.dioceses,
    is_ready: false
});
$MC.dioceses = new $MC.DioceseCollection;

/**
 * Collection of Account Requests
 *
$MC.AccountRequestCollection = Backbone.Collection.extend({
	url: $MC.urls.account_requests,
	is_ready: false
});
$MC.account_requests = new $MC.AccountRequestCollection;
*/

//Attach a serialize function to the jQuery object to handle serializing the form elements.
$.fn.serializeToJSON = function() {
    var retVal = {};
    $.each(this.serializeArray(), function() {  //Use jquery to get all the name/value pairs
    	var name = this.name,
    		pos  = name.indexOf("["),
    		model, 
    		property,
    		obj,
    		valueType;

		//Ensure existence of the object to which the property belongs
    	if (pos > -1) {  //Deal with rails-style form element names, like model[property].
    		model = name.substring(0, pos);
    		property = name.substring(pos+1, name.length-1);
    		if (typeof retVal[model] === "undefined") {
    			retVal[model] = { };
    		}
    		obj = retVal[model];
    	} else {
    		obj = retVal;
    		property = name;
    	}
    	
    	//Add the value to the property
    	valueType = typeof obj[property];
    	if (valueType === "undefined") {  //Value didn't exist
    		obj[property] = this.value;
    	} else if (valueType === "array") {  //Value exists and is already an array
			obj[property].push(this.value);
		} else {  //Value exists and needs to be converted into an array
			obj[property] = [ obj[property] ];
			obj[property].push(this.value);	
		}
    });
    return retVal;
};

/**
 * Base class for a page view. Encapsulates shared properties common to all pages.
 */
$MC.PageView = Backbone.View.extend({
	
	initialize: function(options) {
		console.debug("Initializing page view for " + options.name + ".");
		this.name = options.name;
		this.template = new $MC.Template(this.name, options.collection || {});
		this.$container = $("#" + this.name + "-page");  //This is the real DOM element containing the HTML.
		
    	//Upon instantiation, request the list of accounts from the server.
    	if (options.collection) {
    		_.bindAll(this, "handleFetch");
	    	if (!collection.is_ready) {
	    		console.debug("Fetching data for page " + this.name + ".");
	    		collection.fetch({ success: this.handleFetch });
	    	};
    	}
	},
	
	handleFetch: function(collection) {
		console.debug("Data returned for page " + this.name + ".");
		console.debug(collection);
		collection.is_ready = true; //TODO - shouldn't have to mark is_ready here. The collection should do that.
		this.render();
	},
	
	render: function() {
		console.debug("Rendering page " + this.name + ".");
		var html = this.template.getHtml();
		this.$container.html(html);
	},

	show: function() {
		this.$container.show();
	},
	
	hide: function() {
		this.$container.hide();
	}
});


/**
 * Account request management (admin activity) controller
 *
$MC.RequestManagementController = $MC.PageView.extend({
    
    template: null,
    
    initialize: function() {
    	console.debug("Initializing request management controller...");
    	
    	//Set the template for this view
    	this.template = new $MC.Template("account-request-list", $MC.account_requests);
	
		//Set the parent element for this view
		//TODO This is not working (el doesn't seem to get set. There appears to be a function to do this.)
		this.el = $($MC.pages.pending_requests.selector);	    

    	//Upon instantiation, request the list of accounts from the server.
    	_.bindAll(this, "handleFetch");
    	if (!$MC.account_requests.is_ready) {
    		console.debug("Fetching account requests...");
    		$MC.account_requests.fetch({ success: this.handleFetch });
    	};
	},
	
	handleFetch: function(collection) {
		console.debug("Handling account requests...");
		console.debug(collection);
		collection.is_ready = true;
		this.render();
	},
	
	render: function() {
		console.debug("rendering account requests...");
		var 
			html = this.template.getHtml()
		;
		
		$($MC.pages.pending_requests.selector).html(html);
		
		console.debug($MC.states.get(23).attributes.name);
	}
});
*/

/**
 * Overall page controller. Individual page controller are instantiated by this master one.
 */
$MC.MainView = Backbone.View.extend({
    timer_id: null,
    
    static_data: {
        states: new Backbone.Collection([], { url: "/states" }),
        dioceses: new Backbone.Collection([], { url: "/dioceses" })
    },
    
    collections: {},
    
    page_views: {},
    
    initialize: function() {
        
        console.debug("initializing...");
        
        //Start fetching static resources
        this.fetchStaticData();
        
        //Setup DOM Links and "pages"
       	$($.proxy(function() {
       		console.debug('document ready...');
	       	this.activateLinks();
	       	this.activateForms();
			this.hideAllPages();
			this.showPage("sign_in");
			this.el = $("#content");
       	},this));
        
        //Start the polling to listen for when the resources are ready.        
        this.timer_id = window.setInterval($.proxy(function() {
	        if (this.staticDataIsReady()) {
	            window.clearInterval(this.timer_id);
	            console.debug('Static data is loaded.');
	            console.debug(this.static_data.states);
	            console.debug(this.static_data.dioceses);
	        } 
    	}, this), 300);
    },
    
    fetchStaticData: function() {
        $.each(this.static_data, function() {
        	this.fetch();
        });
    },

    staticDataIsReady: function() {
        var ready = true;
        $.each(this.static_data, function() {
        	ready = ready && this.length > 0;
        });
        return ready;
    },
    
	activateLinks: function() {
		$("a[data-page]").bind("click", $.proxy(function(event) {
			var page;
			event.preventDefault();
			event.stopPropagation();
			page = event.currentTarget.getAttribute('data-page'); //The event target is only being the link when you click in a very specific spot
			console.debug('changing to page: ' + page);
			this.hideAllPages();
			this.showPage(page);
		}, this));
	},
	
	activateForms: function() {
		$("input[type='submit']").bind("click", function(event){ 
			event.preventDefault();
			var form = new $MC.Form();
			form.serialize($(this).closest("form"));
			form.save();
		});
	},
	
	hideAllPages: function() {
		$("div[data-role='page']").hide();  //TODO - needs to call hide() on views, not directly on DOM.
	},
		
	showPage: function(page) {
		if (page === "confessor_requests") {  //TODO -remove conditional. Do for all.
			this.page_views[page] = this.page_views[page] || new $MC.PageView({
				name: page
			});
			this.page_views[page].show();
		} 
		else {
			$($MC.pages[page].selector).show();
		}
	}
});

//Instantiate the main controller, which starts the app.
$MC.main = new $MC.MainView;

})();
</script>
-->
	</body>
</html>
