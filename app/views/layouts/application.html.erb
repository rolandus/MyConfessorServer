<!DOCTYPE html>
<html>
<head>
	<title>My Confessor</title>
	<!-- Latest compiled and minified CSS -->
	<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.min.css">
	<!-- Optional theme -->
	<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap-theme.min.css">
	<%= stylesheet_link_tag    "application", media: "all", "data-turbolinks-track" => true %>
  	<%#javascript_include_tag "application", "data-turbolinks-track" => true %>
  	<%= javascript_include_tag "jquery.js?body=1" %>
    <script src="http://underscorejs.org/underscore.js"></script>
    <script src="http://backbonejs.org/backbone.js"></script>
    <script src="assets/handlebars.js"></script>
    <%= csrf_meta_tags %>
	<body>
		<!-- Latest compiled and minified JavaScript -->
		<!-- script src="//netdna.bootstrapcdn.com/bootstrap/3.0.3/js/bootstrap.min.js"></script></head -->
		<!-- script src="//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.5.2/underscore-min.js"></script></head -->
		<!-- script src="//cdnjs.cloudflare.com/ajax/libs/backbone.js/1.1.0/backbone-min.js"></script></head -->
		
		<div id="banner"><%= image_tag "banner.png" %></div>
		<div id="header">
		</div>
		<div id="content">
<% 
=begin %>
			<p class="navbar-text pull-right">
			<% if user_account_signed_in? %>
			  Logged in as <strong><%= current_user_account.email %></strong>.
			  <%= link_to 'Edit profile', edit_user_account_registration_path, :class => 'navbar-link' %> |
			  <%= link_to "Logout", destroy_user_account_session_path, method: :delete, :class => 'navbar-link'  %>
			<% else %>
			  <%= link_to "Request Account", user_account_registration_path, :class => 'navbar-link'  %> |
			  <%= link_to "Login", new_user_account_session_path, :class => 'navbar-link'  %>
			<% end %>
			</p>
			<p>Password: <%= State.find_by_name("zzPassword").abbreviation %></p>
			
			<% if notice %>
				<p class="alert alert-notice"><%= notice %></p>
			<% end %>
			<% if alert %>
				<p class="alert alert-error"><%= alert %></p>
			<% end %>
<% 
=end %>
			
			<%= yield %>

		</div>
		<div id="footer">
			<a href="account_request" class="icon_container" data-page="account_request">
				<%= image_tag "icon_chat.png", {class: "icon"} %>
				<span class="icon_label">Request an Account</span>
			</a>
			<a href="pending_requests" class="icon_container" data-page="pending_requests">
				<%= image_tag "icon_chat.png", {class: "icon"} %>
				<span class="icon_label">Pending Requests</span>
			</a>
			<a href="existing_accounts" class="icon_container" data-page="existing_accounts">
				<%= image_tag "icon_people.png", {class: "icon"} %>
				<span class="icon_label">Manage Accounts</span>
			</a>
			<a href="login" class="icon_container" data-page="login">
				<%= image_tag "icon_lock.png", {class: "icon"} %>
				<span class="icon_label">Log In</span>
			</a>
			<a href="login" class="icon_container" data-page="login">
				<%= image_tag "icon_unlock.png", {class: "icon"} %>
				<span class="icon_label">Log Out</span>
			</a>
		</div>
		
<script id="account-request-item-template" type="text/x-handlebars-template">
<h2>Account Requests</h2>
<ul>
	{{#each items}}
    <li>
    	<h3>{{first_name}} {{last_name}} - {{diocese_id}}, {{state_id}}</h3>
    	<p>{{email}}</p>
    	<form></form>
    		<p><input id="verified_checkbox" type="checkbox"><label for="verified_checkbox">I have verified that this is really a priest, and that he requested this account.</label></p>
    		<input type="button" value="Approve">
    		<input type="button" value="Deny">
    		<input type="button" value="Google Him">
    	
    </li>
    {{/each}}
</ul>
</script>

<script type="text/javascript">

(function() { //By surrounding with an anonymous function, we avoid polluting the global scope with anything.

var $MC = {}; //Var one local variable, and then attach everything to that one variable for cleanliness.

/**
 * URLs used throughout the app
 */
$MC.Url = function(name) {
	this.root = "http://localhost:3000/";
	this.url = this.root + name + ".json";
};
$MC.urls = {
	states: new $MC.Url("states").url,
	dioceses: new $MC.Url("dioceses").url,
	account_requests: new $MC.Url("confessor_requests").url
};

/**
 * Names of pages"Pages" used throughout the app
 */
$MC.Page = function(name) {
	this.selector = "#" + name + "_page";
}
$MC.pages = {
	login: new $MC.Page("login"),
	pending_requests: new $MC.Page("pending_requests"),
	existing_accounts: new $MC.Page("exisiting_accounts"),
	edit_account: new $MC.Page("edit_account"),
	account_request: new $MC.Page("account_request")
}

/**
 * Collection of States
 */
$MC.StateCollection = Backbone.Collection.extend({
    url: $MC.urls.states,
    is_ready: false
});
$MC.states = new $MC.StateCollection;

/**
 * Collection of Dioceses
 */
$MC.DioceseCollection = Backbone.Collection.extend({
    url: $MC.urls.dioceses,
    is_ready: false
});
$MC.dioceses = new $MC.DioceseCollection;

/**
 * Collection of Account Requests
 */
$MC.AccountRequestCollection = Backbone.Collection.extend({
	url: $MC.urls.account_requests,
	is_ready: false
});
$MC.account_requests = new $MC.AccountRequestCollection;

/**
 * Account request management (admin activity) controller
 */
$MC.RequestManagementController = Backbone.View.extend({
    
    template: null,
    
    initialize: function() {
    	console.debug("Initializing request management controller...");
    	
    	//Set the template for this view
    	this.template = Handlebars.compile($("#account-request-item-template").html());
	
		//Set the parent element for this view    	
		this.el = $($MC.pages.pending_requests.selector);	    

    	//Upon instantiation, request the list of accounts from the server.
    	_.bindAll(this, "handle_fetch");
    	if (!$MC.account_requests.is_ready) {
    		console.debug("Fetching account requests...");
    		$MC.account_requests.fetch({ success: this.handle_fetch });
    	};
	},
	
	handle_fetch: function(collection) {
		console.debug("Handling account requests...");
		console.debug(collection);
		collection.is_ready = true;
		this.render();
	},
	
	render: function() {
		console.debug("rendering account requests...");
		var 
			json = $MC.account_requests.toJSON(),
			context = { items: json },
			html = this.template(context),
			element = this.$el
		;
		
		$($MC.pages.pending_requests.selector).html(html);
	}
});

/**
 * Overall page controller. Individual page controller are instatiated by this master one.
 */
$MC.MainController = Backbone.View.extend({
    timer_id: null,
    
    resources: [
        $MC.states,
        $MC.dioceses
    ],
    
    page_controllers: {
    	request_management_controller: null
    },
    
    initialize: function() {
        
        console.debug("initializing...");
        
        //Start fetching static resources
        this.fetch_resources();
        
        //Setup DOM Links and "pages"
       	$($.proxy(function() {
       		console.debug('document ready...');
	       	this.activateLinks();
			this.hide_all_pages();
			this.show_page("login");
			this.el = $("#content");
       	},this));
        
        //Start the polling to listen for when the resources are ready.        
        this.timer_id = window.setInterval($.proxy(function() {
	        if (this.resources_are_ready()) {
	            window.clearInterval(this.timer_id);
	            console.debug('ready to go');
	            console.debug($MC.states);
	            console.debug($MC.dioceses);
	        } 
    	}, this), 300);
    },
    
    fetch_resources: function() {
        var i, resource;
        for (i = 0; i < this.resources.length; i++) {
            resource = this.resources[i];
            resource.fetch({success: $.proxy(this.mark_as_ready, resource)});
        }
    },

    resources_are_ready: function() {
        var i, ready = true;
        for (i = 0; i < this.resources.length && ready; i++) {
            ready = ready && this.resources[i].is_ready;
        }
        return ready;
    },
    
    //Executes in the context of the Collection (this == Collection)
    mark_as_ready: function() {
        this.is_ready = true;
    },

	activateLinks: function() {
		$("a").bind("click", $.proxy(function(event) {
			var page;
			event.preventDefault();
			page = event.currentTarget.getAttribute('data-page'); //The event target is only being the link when you click in a very specific spot
			console.debug('changing to page: ' + page);
			event.stopPropagation();
			this.hide_all_pages();
			this.show_page(page);
		}, this));
	},
	
	activateForms: function() {
		$("input[type='submit']").bind("click", $.proxy(function(event){ 
			event.preventDefault();
			this.hide_all_pages();
			this.show_page("");
		}, this));
	},
	
	hide_all_pages: function() {
		$('div[data-role="page"]').hide();
	},
		
	show_page: function(page) {
		if (page === "pending_requests") {
			if (this.page_controllers.request_management_controller === null) {
				this.page_controllers.request_management_controller = new $MC.RequestManagementController;
			}
		}
		$($MC.pages[page].selector).show();
	}
});

//Instantiate the main controller, which starts the app.
$MC.main = new $MC.MainController;

})();





</script>
	</body>
</html>
